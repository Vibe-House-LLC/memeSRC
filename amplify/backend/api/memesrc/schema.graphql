# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Series @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] },
    { allow: private, operations: [read] },
    { allow: public, operations: [read] }
  ]
) {
  id: ID!,
  tvdbid: ID! @index,
  slug: String,
  name: String,
  year: Int,
  image: String,
  description: String,
  seasons: [Season] @hasMany,
  statusText: String,
}

type SourceMedia @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods", "contributors"] }
  ]
) {
  id: ID!,
  series: Series @hasOne,
  files: [File] @hasMany,
  status: String,
  user: UserDetails @belongsTo
}

type File @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] }
  ]
) {
  id: ID!,
  sourceMedia: SourceMedia @belongsTo,
  key: String,
  status: String,
}

type Season @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] },
    { allow: private, operations: [read] },
    { allow: public, operations: [read] }
  ]
) {
  id: ID!,
  tvdbid: Int!,
  year: Int,
  image: String,
  description: String,
  series: Series @belongsTo,
  episodes: [Episode] @hasMany
}

type Episode @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] },
    { allow: private, operations: [read] },
    { allow: public, operations: [read] }
  ]
) {
  id: ID!,
  tvdbid: Int!,
  year: Int,
  image: String,
  description: String,
  season: Season @belongsTo
  subtitles: [Subtitle] @hasMany
}

type Subtitle @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] },
    { allow: private, operations: [read] },
    { allow: public, operations: [read] }
  ]
) {
  id: ID!,
  tvdbid: Int!,
  year: Int,
  image: String,
  description: String,
  start: Int,
  end: Int,
  episode: Episode @belongsTo
}

type AnalyticsMetrics @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] }
  ]
) {
  id: ID!,
  value: String
}

type ContentMetadata @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] },
    { allow: private, operations: [read] },
    { allow: public, operations: [read]}
  ]
) {
  id: ID!,
  title: String!,
  description: String,
  frameCount: Int,
  colorMain: String,
  colorSecondary: String,
  emoji: String,
  status: Int @index
  version: Int
  users: [UserDetails] @manyToMany(relationName: "UserMetadata")
}

type Favorite @model @auth(rules: [
    { allow: owner, operations: [read, create, delete] }
  ]
) {
  id: ID!
  owner: String
  cid: String!
}

type V2ContentMetadata @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] },
    { allow: private, operations: [read] },
    { allow: public, operations: [read]}
  ]
) {
  id: ID!,
  title: String!,
  description: String,
  frameCount: Int,
  colorMain: String,
  colorSecondary: String,
  emoji: String,
  status: Int @index
  version: Int
  users: [UserDetails] @manyToMany(relationName: "UserV2Metadata")
  alias: Alias @hasOne
  fontFamily: String
  isIndexing: Boolean
  lastIndexingStartedAt: AWSDateTime
}

type Alias @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] },
    { allow: private, operations: [read] },
    { allow: public, operations: [read]}
  ]
) {
  id: ID!,
  v2ContentMetadata: V2ContentMetadata @belongsTo
}

type HomepageSection @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] },
    { allow: private, operations: [read] },
    { allow: public, operations: [read]}
  ]
) {
  id: ID!,
  index: Int,
  title: String!,
  subtitle: String,
  buttons: AWSJSON,
  bottomImage: AWSJSON,
  buttonSubtext: AWSJSON,
  backgroundColor: String,
  textColor: String
}

type UserDetails @model @auth(
  rules: [
    { allow: groups, groups: ["admins"] },
  ]
) {
  id: ID!,
  username: String,
  email: String,
  earlyAccessStatus: String
  contributorAccessStatus: String
  stripeId: String,
  sourceMedia: [SourceMedia] @hasMany,
  status: String,
  votes: [SeriesUserVote] @hasMany,
  credits: Int,
  stripeCustomerInfo: StripeCustomer @hasOne,
  stripeCheckoutSession: [StripeCheckoutSession] @hasMany,
  subscriptionPeriodStart: String,
  subscriptionPeriodEnd: String,
  subscriptionStatus: String,
  magicSubscription: String,
  userNotifications: [UserNotification] @hasMany
  contentMetadatas: [ContentMetadata] @manyToMany(relationName: "UserMetadata")
  v2ContentMetadatas: [V2ContentMetadata] @manyToMany(relationName: "UserV2Metadata")
  proSupportMessages: [ProSupportMessage] @hasMany
  favorites: AWSJSON
}

type StripeCustomer @model @auth(
  rules: [
    { allow: groups, groups: ["admins"] },
  ]
) {
  id: ID!,
  user: UserDetails @hasOne
}

type StripeCheckoutSession @model @auth(
  rules: [
    { allow: groups, groups: ["admins"] },
  ]
) {
  id: ID!,
  user: UserDetails @belongsTo
  status: String
}

type SeriesUserVote @model @auth(
  rules: [
    { allow: groups, groups: ["admins"] },
    { allow: private, operations: [read] },
    { allow: public, operations: [read]}
  ]
) {
  id: ID!,
  user: UserDetails @belongsTo,
  series: Series @hasOne,
  boost: Int
}

type UserNotification @model @auth(
  rules: [
    { allow: groups, groups: ["admins"] },
  ]
) {
  id: ID!,
  user: UserDetails @belongsTo
  title: String
  description: String
  avatar: String
  type: String
  isUnRead: Boolean
  path: String
}

type FrameSubtitle @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] },
    { allow: private, operations: [read] },
    { allow: public, operations: [read] }
  ]
) {
  id: ID!,
  subtitle: String!
}

type MagicResult @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] },
    { allow: private, operations: [read] },
    { allow: public, operations: [read] }
  ]
) {
  id: ID!, 
  user: UserDetails @hasOne,
  prompt: String,
  results: String
}

type EditorProject @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] }
  ]
) {
  id: ID!,
  user: UserDetails @hasOne,
  title: String,
  state: String
}

type WebsiteSetting @model @auth(
  rules: [
    { allow: groups, groups: ["admins"] },
    { allow: private, operations: [read] },
    { allow: public, operations: [read] }
  ]
) {
  id: ID!, 
  fullSiteMaintenance: Boolean,
  universalSearchMaintenance: Boolean
}

type ProSupportMessage @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] },
  ]
) {
  id: ID!
  user: UserDetails @belongsTo
  message: String!
  createdAt: AWSDateTime!
}

type LocationLeads @model @auth(
  rules: [
    { allow: groups, groups: ["admins", "mods"] },
    { allow: owner,  operations: [create] },
  ]
) {
  id: ID!,
  countryCode: String
}

